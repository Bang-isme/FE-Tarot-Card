{"version":3,"file":"static/js/196.c459fed1.chunk.js","mappings":"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","sources":["features/tarot/components/TarotReadingForm.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/prop-types/index.js","features/tarot/components/TarotCardDisplay.js","features/tarot/components/ReadingResult.js","features/tarot/components/TarotReadingLayout.js","features/tarot/components/TarotReading.js"],"sourcesContent":["import React, { useState, memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { performReading } from '../slices/tarotSlice';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ReadingTypeCard = memo(({ type, selected, onClick, icon, description }) => (\r\n  <div \r\n    className={`p-4 rounded-lg cursor-pointer transition-all duration-300 \r\n    ${selected \r\n      ? 'bg-gradient-to-r from-[#9370db] to-[#8a2be2] shadow-lg transform scale-[1.02]' \r\n      : 'bg-white/5 backdrop-blur-sm border border-purple-900/20 hover:bg-white/10'}`}\r\n    onClick={() => onClick(type.id)}\r\n  >\r\n    <div className=\"flex items-center\">\r\n      <div className=\"w-12 h-12 rounded-full bg-[#2a1045] flex items-center justify-center mr-4\">\r\n        <span className=\"text-2xl\">{icon}</span>\r\n      </div>\r\n      <div>\r\n        <h3 className=\"text-lg font-medium text-white mb-1 tracking-vn-tight\">{type.name}</h3>\r\n        <p className=\"text-sm text-gray-300 tracking-vn-tight\">{description}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n));\r\n\r\n/**\r\n * Form để bắt đầu một phiên đọc bài Tarot \r\n * @param {Object} props - Component props\r\n * @param {Function} props.onStart - Callback khi bắt đầu trải bài\r\n * @param {Array} props.readingTypes - Danh sách các loại trải bài\r\n * @param {boolean} props.isLoading - Trạng thái loading\r\n */\r\nconst TarotReadingForm = memo(({ onStart, readingTypes = [], isLoading = false }) => {\r\n  const dispatch = useDispatch();\r\n  const [selectedType, setSelectedType] = useState('three-card'); // Mặc định chọn trải bài 3 lá\r\n  const [question, setQuestion] = useState('');\r\n  const [showAIQuestion, setShowAIQuestion] = useState(false);\r\n  const [error, setError] = useState('');\r\n  \r\n  // Các loại trải bài mặc định nếu không có data\r\n  const defaultReadingTypes = [\r\n    { id: 'three-card', name: 'Trải bài 3 lá', cards: 3, description: 'Quá khứ, hiện tại và tương lai' },\r\n    { id: 'celtic-cross', name: 'Celtic Cross', cards: 10, description: 'Phân tích chi tiết tình huống' },\r\n    { id: 'love', name: 'Tình yêu', cards: 5, description: 'Tập trung vào tình yêu và mối quan hệ' },\r\n    { id: 'career', name: 'Sự nghiệp', cards: 5, description: 'Tập trung vào công việc và sự nghiệp' }\r\n  ];\r\n  \r\n  const types = readingTypes.length > 0 ? readingTypes : defaultReadingTypes;\r\n  \r\n  // Icons cho các loại trải bài\r\n  const typeIcons = {\r\n    'three-card': '🃏',\r\n    'celtic-cross': '✝️',\r\n    'love': '❤️',\r\n    'career': '💼',\r\n    'health': '🩺',\r\n    'spiritual': '✨',\r\n    'yearly': '📅',\r\n    'daily': '🌞'\r\n  };\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Validate\r\n    if (!selectedType) {\r\n      setError('Vui lòng chọn loại trải bài');\r\n      return;\r\n    }\r\n    \r\n    setError('');\r\n    \r\n    // Tìm type đã chọn\r\n    const selectedReadingType = types.find(type => type.id === selectedType);\r\n    \r\n    if (!selectedReadingType) {\r\n      setError('Loại trải bài không hợp lệ');\r\n      return;\r\n    }\r\n    \r\n    // Tạo dữ liệu reading\r\n    const readingData = {\r\n      readingType: selectedType,\r\n      question: question.trim(),\r\n      numCards: selectedReadingType.cards || 3\r\n    };\r\n    \r\n    // Dispatch action\r\n    try {\r\n      dispatch(performReading(readingData));\r\n      \r\n      // Gọi callback\r\n      if (onStart) {\r\n        onStart(readingData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Lỗi khi thực hiện trải bài:', error);\r\n      setError('Có lỗi xảy ra khi thực hiện trải bài. Vui lòng thử lại sau.');\r\n    }\r\n  };\r\n  \r\n  // Bắt đầu trải bài ngay lập tức, không cần câu hỏi\r\n  const handleQuickStart = () => {\r\n    if (!selectedType) {\r\n      setError('Vui lòng chọn loại trải bài');\r\n      return;\r\n    }\r\n    \r\n    setError('');\r\n    \r\n    // Tìm type đã chọn\r\n    const selectedReadingType = types.find(type => type.id === selectedType);\r\n    \r\n    if (!selectedReadingType) {\r\n      setError('Loại trải bài không hợp lệ');\r\n      return;\r\n    }\r\n    \r\n    // Tạo dữ liệu reading không có câu hỏi\r\n    const readingData = {\r\n      readingType: selectedType,\r\n      numCards: selectedReadingType.cards || 3\r\n    };\r\n    \r\n    // Dispatch action\r\n    try {\r\n      dispatch(performReading(readingData));\r\n      \r\n      // Gọi callback\r\n      if (onStart) {\r\n        onStart(readingData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Lỗi khi thực hiện trải bài:', error);\r\n      setError('Có lỗi xảy ra khi thực hiện trải bài. Vui lòng thử lại sau.');\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.5 }}\r\n      className=\"w-full max-w-2xl mx-auto\"\r\n    >\r\n      <form onSubmit={handleSubmit} className=\"bg-white/5 backdrop-blur-sm border border-purple-900/20 rounded-xl p-6 shadow-lg\">\r\n        <div className=\"mb-6\">\r\n          <h2 className=\"text-2xl font-bold mb-2 text-white tracking-tight\">Trải Bài Tarot</h2>\r\n          <p className=\"text-gray-300 tracking-tight\">\r\n            Hãy đặt một câu hỏi cụ thể hoặc chọn trải bài ngay để nhận thông điệp\r\n          </p>\r\n        </div>\r\n        \r\n        {error && (\r\n          <div className=\"bg-red-500/20 backdrop-blur-sm border border-red-500/30 rounded-lg p-4 mb-6\">\r\n            <p className=\"text-white tracking-vn-tight\">{error}</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"mb-6\">\r\n          <label className=\"block text-white font-medium mb-3 tracking-tight\">Chọn loại trải bài</label>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\r\n            {types.map((type) => (\r\n              <div \r\n                key={type.id}\r\n                onClick={() => setSelectedType(type.id)}\r\n                className={`\r\n                  cursor-pointer p-3 rounded-lg border transition-all duration-200\r\n                  ${selectedType === type.id \r\n                    ? 'bg-[#9370db]/20 border-[#9370db] shadow-md' \r\n                    : 'bg-white/5 border-purple-900/20 hover:bg-white/10'}\r\n                `}\r\n              >\r\n                <div className=\"flex items-center\">\r\n                  <div className={`w-4 h-4 rounded-full mr-2 border ${selectedType === type.id ? 'bg-[#9370db] border-[#9370db]' : 'bg-transparent border-white/50'}`}>\r\n                    {selectedType === type.id && (\r\n                      <div className=\"w-full h-full rounded-full bg-white scale-50\"></div>\r\n                    )}\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-white font-medium tracking-tight\">{type.name}</p>\r\n                    <p className=\"text-xs text-gray-300 tracking-tight\">{type.description}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"mb-6\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleQuickStart}\r\n            disabled={isLoading}\r\n            className=\"flex items-center text-[#9370db] hover:text-[#8a2be2] transition-colors\"\r\n          >\r\n            <span className=\"mr-2\">{isLoading ? 'Đang xử lý...' : 'Trải Bài Ngay'}</span>\r\n            <svg \r\n              xmlns=\"http://www.w3.org/2000/svg\" \r\n              className={`h-5 w-5 transition-transform duration-300 ${isLoading ? 'animate-spin' : ''}`}\r\n              fill=\"none\" \r\n              viewBox=\"0 0 24 24\" \r\n              stroke=\"currentColor\"\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"mb-6\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => setShowAIQuestion(!showAIQuestion)}\r\n            className=\"flex items-center text-[#9370db] hover:text-[#8a2be2] transition-colors\"\r\n          >\r\n            <span className=\"mr-2\">{showAIQuestion ? 'Ẩn câu hỏi' : 'Đặt câu hỏi cho trải bài'}</span>\r\n            <svg \r\n              xmlns=\"http://www.w3.org/2000/svg\" \r\n              className={`h-5 w-5 transition-transform duration-300 ${showAIQuestion ? 'rotate-180' : ''}`}\r\n              fill=\"none\" \r\n              viewBox=\"0 0 24 24\" \r\n              stroke=\"currentColor\"\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        \r\n        {showAIQuestion && (\r\n          <motion.div\r\n            initial={{ opacity: 0, height: 0 }}\r\n            animate={{ opacity: 1, height: 'auto' }}\r\n            exit={{ opacity: 0, height: 0 }}\r\n            transition={{ duration: 0.3 }}\r\n            className=\"mb-6\"\r\n          >\r\n            <label htmlFor=\"question\" className=\"block text-white font-medium mb-2 tracking-tight\">\r\n              Câu hỏi của bạn\r\n            </label>\r\n            <textarea\r\n              id=\"question\"\r\n              value={question}\r\n              onChange={(e) => setQuestion(e.target.value)}\r\n              placeholder=\"Nhập câu hỏi bạn muốn tìm hiểu...\"\r\n              className=\"w-full p-3 bg-white/10 border border-purple-900/30 rounded-lg text-white placeholder-white/50 focus:ring-[#9370db] focus:border-[#9370db] focus:outline-none transition-colors\"\r\n              rows={3}\r\n            />\r\n            <p className=\"mt-2 text-sm text-gray-400 tracking-tight\">\r\n              Gợi ý: \"Tình yêu của tôi sẽ phát triển như thế nào?\", \"Tôi nên làm gì với công việc hiện tại?\"\r\n            </p>\r\n          </motion.div>\r\n        )}\r\n        \r\n        <div className=\"flex flex-wrap gap-3\">\r\n          {showAIQuestion && (\r\n            <button\r\n              type=\"submit\"\r\n              disabled={!question.trim() || isLoading}\r\n              className={`\r\n                px-6 py-2.5 rounded-lg font-medium shadow-sm transition-all\r\n                ${!question.trim() \r\n                  ? 'bg-white/20 text-white/50 cursor-not-allowed' \r\n                  : 'bg-white text-[#2a1045] hover:bg-gray-100'}\r\n              `}\r\n            >\r\n              {isLoading ? 'Đang xử lý...' : 'Bắt Đầu Với Câu Hỏi'}\r\n            </button>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"mt-4 text-xs text-gray-400 tracking-tight\">\r\n          * Lưu ý: Các lá bài Tarot mang tính biểu tượng và gợi ý. Hãy suy ngẫm ý nghĩa của chúng trong ngữ cảnh cuộc sống của bạn.\r\n        </div>\r\n      </form>\r\n    </motion.div>\r\n  );\r\n});\r\n\r\nTarotReadingForm.propTypes = {\r\n  onStart: PropTypes.func,\r\n  readingTypes: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      cards: PropTypes.number.isRequired,\r\n      description: PropTypes.string\r\n    })\r\n  ),\r\n  isLoading: PropTypes.bool\r\n};\r\n\r\nReadingTypeCard.propTypes = {\r\n  type: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  }).isRequired,\r\n  selected: PropTypes.bool.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n  icon: PropTypes.string.isRequired,\r\n  description: PropTypes.string\r\n};\r\n\r\nexport default TarotReadingForm; ","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","import React, { useState, useEffect, memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { motion } from 'framer-motion';\r\n\r\n/**\r\n * Component hiển thị lá bài Tarot với animation\r\n * @param {Object} props - Component props\r\n * @param {Object} props.card - Thông tin lá bài\r\n * @param {boolean} props.isRevealed - Trạng thái lá bài (đã lật hay chưa)\r\n * @param {Function} props.onCardClick - Callback khi click vào lá bài\r\n * @param {boolean} props.isSelectable - Có thể select lá bài hay không\r\n * @param {boolean} props.isSelected - Lá bài đã được chọn hay chưa\r\n * @param {string} props.size - Kích thước lá bài (\"small\", \"medium\", \"large\")\r\n * @param {string} props.position - Vị trí lá bài trong trải bài\r\n */\r\nconst TarotCardDisplay = memo(({ \r\n  card = {}, \r\n  isRevealed = false, \r\n  onCardClick, \r\n  isSelectable = false,\r\n  isSelected = false,\r\n  size = 'medium',\r\n  position = ''\r\n}) => {\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n  const [isReversal, setIsReversal] = useState(false);\r\n  const [isHovering, setIsHovering] = useState(false);\r\n\r\n  // Xác định lá bài ngược dựa vào dữ liệu card hoặc random\r\n  useEffect(() => {\r\n    if (card && card.isReversed !== undefined) {\r\n      setIsReversal(card.isReversed);\r\n    } else {\r\n      // 20% cơ hội lá bài sẽ ngược\r\n      setIsReversal(Math.random() < 0.2);\r\n    }\r\n  }, [card]);\r\n\r\n  // Flip animation khi isRevealed thay đổi\r\n  useEffect(() => {\r\n    if (isRevealed) {\r\n      const timer = setTimeout(() => {\r\n        setIsFlipped(true);\r\n      }, 300);\r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      setIsFlipped(false);\r\n    }\r\n  }, [isRevealed]);\r\n\r\n  // Xác định kích thước của lá bài\r\n  const sizeClasses = {\r\n    small: 'w-24 h-36',\r\n    medium: 'w-32 h-48',\r\n    large: 'w-40 h-60',\r\n  };\r\n\r\n  // Handler khi hover vào lá bài\r\n  const handleMouseEnter = () => {\r\n    if (isSelectable) {\r\n      setIsHovering(true);\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setIsHovering(false);\r\n  };\r\n\r\n  // Handler khi click vào lá bài\r\n  const handleCardClick = () => {\r\n    if (isSelectable && onCardClick) {\r\n      onCardClick(card);\r\n    }\r\n  };\r\n\r\n  if (!card) {\r\n    // Trả về card rỗng nếu card là null hoặc undefined\r\n    return (\r\n      <div \r\n        className={`absolute ${position} transition-transform duration-300`}\r\n        style={{ transform: 'translate(-50%, -50%)' }}\r\n      >\r\n        <div \r\n          className={`bg-gray-800 rounded-lg shadow-lg overflow-hidden ${\r\n            size === 'small' ? 'w-24 h-36' : \r\n            size === 'medium' ? 'w-32 h-48' : \r\n            'w-40 h-60'\r\n          }`} \r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Animation variants\r\n  const cardVariants = {\r\n    hidden: {\r\n      rotateY: 0\r\n    },\r\n    visible: {\r\n      rotateY: 180,\r\n      transition: {\r\n        duration: 0.5,\r\n        ease: \"easeInOut\"\r\n      }\r\n    }\r\n  };\r\n  \r\n  const cardBackVariants = {\r\n    hidden: {\r\n      opacity: 1\r\n    },\r\n    visible: {\r\n      opacity: 0,\r\n      transition: {\r\n        duration: 0.25,\r\n        delay: 0.25\r\n      }\r\n    }\r\n  };\r\n  \r\n  const cardFrontVariants = {\r\n    hidden: {\r\n      opacity: 0\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      transition: {\r\n        duration: 0.25,\r\n        delay: 0.25\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Default card back image\r\n  const defaultCardBack = '/images/tarot-card-back.jpg';\r\n  \r\n  return (\r\n    <div \r\n      className={`absolute ${position} transition-transform duration-300`}\r\n      style={{ transform: 'translate(-50%, -50%)' }}\r\n    >\r\n      <motion.div\r\n        className={`relative ${sizeClasses[size] || sizeClasses.medium} cursor-pointer perspective-500`}\r\n        initial=\"hidden\"\r\n        animate={isRevealed ? \"visible\" : \"hidden\"}\r\n        variants={cardVariants}\r\n        onClick={handleCardClick}\r\n        style={{ transformStyle: 'preserve-3d' }}\r\n      >\r\n        {/* Card Back */}\r\n        <motion.div\r\n          className=\"absolute inset-0 backface-hidden rounded-lg shadow-lg overflow-hidden\"\r\n          variants={cardBackVariants}\r\n        >\r\n          <img \r\n            src={defaultCardBack} \r\n            alt=\"Card Back\" \r\n            className=\"w-full h-full object-cover object-center\"\r\n            onError={e => {\r\n              e.target.src = 'https://placehold.co/600x900/2a1045/9370db?text=Tarot';\r\n            }}\r\n          />\r\n        </motion.div>\r\n        \r\n        {/* Card Front */}\r\n        <motion.div\r\n          className=\"absolute inset-0 backface-hidden rounded-lg shadow-lg overflow-hidden rotateY-180\"\r\n          variants={cardFrontVariants}\r\n        >\r\n          <div className={`w-full h-full relative ${card.isReversed ? 'rotate-180' : ''}`}>\r\n            <img \r\n              src={card.imageUrl || 'https://placehold.co/600x900/2a1045/9370db?text=Tarot'}\r\n              alt={card.name || 'Tarot Card'} \r\n              className=\"w-full h-full object-cover object-center\"\r\n              onError={e => {\r\n                e.target.src = 'https://placehold.co/600x900/2a1045/9370db?text=Tarot';\r\n              }}\r\n            />\r\n            \r\n            {/* Card Name */}\r\n            <div className=\"absolute inset-x-0 bottom-0 bg-gradient-to-t from-black to-transparent p-2\">\r\n              <p className=\"text-white text-center text-xs md:text-sm font-medium truncate\">\r\n                {card.name || 'Tarot Card'}\r\n                {card.isReversed && ' (Reversed)'}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </motion.div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n});\r\n\r\nTarotCardDisplay.propTypes = {\r\n  card: PropTypes.object,\r\n  isRevealed: PropTypes.bool,\r\n  onCardClick: PropTypes.func,\r\n  isSelectable: PropTypes.bool,\r\n  isSelected: PropTypes.bool,\r\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\r\n  position: PropTypes.string\r\n};\r\n\r\nexport default TarotCardDisplay; ","import React, { useState, useEffect, memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport TarotCardDisplay from './TarotCardDisplay';\r\n\r\n/**\r\n * Component hiển thị kết quả đọc bài Tarot\r\n * @param {Object} props - Component props\r\n * @param {Object} props.reading - Kết quả đọc bài\r\n * @param {string} props.interpretation - Phần giải thích\r\n * @param {boolean} props.isLoading - Trạng thái loading\r\n * @param {Function} props.onSave - Callback khi lưu kết quả\r\n * @param {Function} props.onShareClick - Callback khi share kết quả\r\n */\r\nconst ReadingResult = memo(({ \r\n  reading = {}, \r\n  interpretation = '', \r\n  isLoading = false,\r\n  onSave,\r\n  onShareClick\r\n}) => {\r\n  const [allCardsRevealed, setAllCardsRevealed] = useState(false);\r\n  const [revealsCount, setRevealsCount] = useState(0);\r\n  const [expandedSection, setExpandedSection] = useState(null);\r\n  \r\n  // Auto reveal cards với delay\r\n  useEffect(() => {\r\n    if (reading && reading.cards && Array.isArray(reading.cards) && reading.cards.length > 0) {\r\n      const revealInterval = setInterval(() => {\r\n        setRevealsCount(prev => {\r\n          const next = prev + 1;\r\n          if (next >= reading.cards.length) {\r\n            clearInterval(revealInterval);\r\n            setAllCardsRevealed(true);\r\n            return reading.cards.length;\r\n          }\r\n          return next;\r\n        });\r\n      }, 1000);\r\n      \r\n      return () => clearInterval(revealInterval);\r\n    } else {\r\n      // Nếu không có cards, đặt allCardsRevealed = true để hiển thị phần giải thích\r\n      setAllCardsRevealed(true);\r\n    }\r\n  }, [reading]);\r\n  \r\n  // Nếu không có kết quả, hiển thị trạng thái không có dữ liệu\r\n  if (!reading || (reading.cards && Array.isArray(reading.cards) && reading.cards.length === 0)) {\r\n    return (\r\n      <div className=\"bg-white/5 backdrop-blur-sm border border-purple-900/20 rounded-xl p-6 md:p-8 text-center\">\r\n        <p className=\"text-gray-300 tracking-vn-tight\">Không có kết quả để hiển thị.</p>\r\n        <Link\r\n          to=\"/tarot-readings\"\r\n          className=\"mt-6 inline-block bg-gradient-to-r from-[#9370db] to-[#8a2be2] text-white px-4 py-2 rounded-lg font-medium hover:shadow-lg transition-shadow tracking-vn-tight\"\r\n        >\r\n          Xem bói mới\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // Xác định loại trải bài và vị trí của từng lá\r\n  const getCardPositions = () => {\r\n    const readingType = reading.readingType || 'general';\r\n    const cardsCount = reading.cards && Array.isArray(reading.cards) ? reading.cards.length : 0;\r\n    \r\n    switch (readingType) {\r\n      case 'three-card':\r\n        return [\r\n          'left-5 top-1/2 -translate-y-1/2',\r\n          'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',\r\n          'right-5 top-1/2 -translate-y-1/2'\r\n        ];\r\n      case 'celtic-cross':\r\n        return [\r\n          'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2', // Center card\r\n          'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rotate-90', // Crossing card\r\n          'left-1/2 bottom-10 -translate-x-1/2', // Below\r\n          'left-1/2 top-10 -translate-x-1/2', // Above\r\n          'left-20 top-1/2 -translate-y-1/2', // Left\r\n          'right-20 top-1/2 -translate-y-1/2', // Right\r\n          'right-5 bottom-20', // Position 7\r\n          'right-5 bottom-80', // Position 8\r\n          'right-5 top-80', // Position 9\r\n          'right-5 top-20', // Position 10\r\n        ];\r\n      case 'love':\r\n      case 'career':\r\n        return [\r\n          'left-5 top-1/2 -translate-y-1/2',\r\n          'left-1/4 top-1/2 -translate-y-1/2',\r\n          'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',\r\n          'left-3/4 top-1/2 -translate-y-1/2',\r\n          'right-5 top-1/2 -translate-y-1/2'\r\n        ];\r\n      default:\r\n        // Default circular arrangement\r\n        const positions = [];\r\n        \r\n        for (let i = 0; i < cardsCount; i++) {\r\n          const angle = (i / cardsCount) * 2 * Math.PI;\r\n          const radius = 150; // pixels\r\n          const x = 50 + 40 * Math.cos(angle);\r\n          const y = 50 + 40 * Math.sin(angle);\r\n          positions.push(`left-[${x}%] top-[${y}%] -translate-x-1/2 -translate-y-1/2`);\r\n        }\r\n        \r\n        return positions;\r\n    }\r\n  };\r\n  \r\n  const cardPositions = getCardPositions();\r\n  const readingDate = new Date(reading.createdAt || Date.now()).toLocaleDateString('vi-VN', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n  \r\n  // Sections của lời giải\r\n  let sections = [];\r\n  \r\n  if (interpretation) {\r\n    // Nếu có interpretation, tách nó thành các sections\r\n    try {\r\n      if (typeof interpretation === 'string' && interpretation.trim() !== '') {\r\n        // Try to parse from JSON string\r\n        try {\r\n          const parsedInterpretation = JSON.parse(interpretation);\r\n          sections = parsedInterpretation.sections || [];\r\n        } catch (e) {\r\n          // Nếu parse fail, tạo một section duy nhất\r\n          sections = [{\r\n            title: 'Giải thích tổng quan',\r\n            content: interpretation\r\n          }];\r\n        }\r\n      } else if (interpretation.sections) {\r\n        sections = interpretation.sections;\r\n      } else if (interpretation.interpretation && interpretation.interpretation.sections) {\r\n        sections = interpretation.interpretation.sections;\r\n      }\r\n    } catch (e) {\r\n      // Nếu parse fail, tạo một section duy nhất\r\n      sections = [{\r\n        title: 'Giải thích tổng quan',\r\n        content: 'Không thể hiển thị nội dung giải thích.'\r\n      }];\r\n    }\r\n  } else if (reading.cards && Array.isArray(reading.cards)) {\r\n    // Nếu không có interpretation, tạo sections từ cards\r\n    sections = reading.cards.map((card, index) => ({\r\n      title: `Lá bài ${index + 1}: ${card.name || 'Không tên'}`,\r\n      content: card.meaning || 'Không có thông tin chi tiết.'\r\n    }));\r\n  }\r\n  \r\n  // Nếu vẫn không có sections, tạo một section mặc định\r\n  if (sections.length === 0) {\r\n    sections = [{\r\n      title: 'Giải thích tổng quan',\r\n      content: 'Hãy suy ngẫm về lá bài này và tìm ra ý nghĩa phù hợp với tình huống của bạn.'\r\n    }];\r\n  }\r\n  \r\n  // Toggle section\r\n  const toggleSection = (index) => {\r\n    if (expandedSection === index) {\r\n      setExpandedSection(null);\r\n    } else {\r\n      setExpandedSection(index);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"bg-white/5 backdrop-blur-sm border border-purple-900/20 rounded-xl p-6 md:p-8\">\r\n      {/* Header */}\r\n      <div className=\"mb-8\">\r\n        <h2 className=\"text-2xl font-bold text-white mb-2 tracking-vn-tight\">\r\n          {reading.readingType === 'daily' ? 'Tarot Hàng Ngày' : `Trải bài ${reading.readingType || 'Tarot'}`}\r\n        </h2>\r\n        <div className=\"flex flex-wrap items-center text-gray-300 text-sm tracking-vn-tight\">\r\n          <div className=\"mr-4 mb-2\">{readingDate}</div>\r\n          {reading.question && (\r\n            <div className=\"mr-4 mb-2 px-2 py-1 bg-[#9370db]/20 rounded-full\">\r\n              {reading.question.length > 50 ? `${reading.question.substring(0, 50)}...` : reading.question}\r\n            </div>\r\n          )}\r\n          <div className=\"flex items-center\">\r\n            <span className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></span>\r\n            <span>Hoàn thành</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Cards Display Section */}\r\n      {reading.cards && Array.isArray(reading.cards) && reading.cards.length > 0 && (\r\n        <div className=\"relative h-[400px] md:h-[500px] mb-10 bg-gradient-to-br from-[#2a1045]/50 to-[#3a1c5a]/50 rounded-xl overflow-hidden\">\r\n          {reading.cards.map((card, index) => {\r\n            if (!card || index >= cardPositions.length) return null;\r\n            \r\n            return (\r\n              <TarotCardDisplay \r\n                key={card.id || index}\r\n                card={card}\r\n                isRevealed={index < revealsCount}\r\n                size=\"medium\"\r\n                position={cardPositions[index] || ''}\r\n              />\r\n            );\r\n          })}\r\n          \r\n          {isLoading && (\r\n            <div className=\"absolute inset-0 flex items-center justify-center bg-[#0f051d]/70 backdrop-blur-sm\">\r\n              <div className=\"flex flex-col items-center\">\r\n                <svg className=\"animate-spin h-10 w-10 text-[#9370db] mb-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                </svg>\r\n                <p className=\"text-white tracking-vn-tight\">Đang giải mã năng lượng từ các lá bài...</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Interpretation Section */}\r\n      {(allCardsRevealed || !reading.cards || reading.cards.length === 0) && !isLoading && (\r\n        <div className=\"mb-8\">\r\n          <h3 className=\"text-xl font-bold text-white mb-4 tracking-vn-tight\">Giải Thích</h3>\r\n          \r\n          <div className=\"space-y-4\">\r\n            {sections.map((section, index) => (\r\n              <div key={index} className=\"bg-white/5 backdrop-blur-sm border border-purple-900/20 rounded-lg overflow-hidden\">\r\n                <button \r\n                  className=\"w-full px-4 py-3 flex justify-between items-center text-left text-white font-medium tracking-vn-tight\"\r\n                  onClick={() => toggleSection(index)}\r\n                >\r\n                  <span>{section.title || `Phần ${index + 1}`}</span>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className={`h-5 w-5 transform transition-transform ${expandedSection === index ? 'rotate-180' : ''}`}\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                  </svg>\r\n                </button>\r\n                \r\n                {expandedSection === index && (\r\n                  <div className=\"px-4 py-3 border-t border-purple-900/20 text-gray-300 tracking-vn-tight leading-vn\">\r\n                    <p>{section.content || 'Không có nội dung'}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          {interpretation && interpretation.interpretation && interpretation.interpretation.conclusion && (\r\n            <div className=\"mt-6 p-4 bg-[#9370db]/10 rounded-lg\">\r\n              <p className=\"text-gray-300 tracking-vn-tight italic\">\r\n                \"{interpretation.interpretation.conclusion}\"\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Actions */}\r\n      <div className=\"flex flex-wrap gap-3 justify-center md:justify-between\">\r\n        <div className=\"flex gap-3\">\r\n          {onSave && (\r\n            <button\r\n              onClick={onSave}\r\n              className=\"bg-white/10 backdrop-blur-sm text-white px-4 py-2 rounded-lg font-medium hover:bg-white/20 transition-colors tracking-vn-tight flex items-center\"\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z\" />\r\n              </svg>\r\n              Lưu kết quả\r\n            </button>\r\n          )}\r\n          \r\n          {onShareClick && (\r\n            <button\r\n              onClick={onShareClick}\r\n              className=\"bg-white/10 backdrop-blur-sm text-white px-4 py-2 rounded-lg font-medium hover:bg-white/20 transition-colors tracking-vn-tight flex items-center\"\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z\" />\r\n              </svg>\r\n              Chia sẻ\r\n            </button>\r\n          )}\r\n        </div>\r\n        \r\n        <Link\r\n          to=\"/tarot-readings\"\r\n          className=\"bg-gradient-to-r from-[#9370db] to-[#8a2be2] text-white px-4 py-2 rounded-lg font-medium hover:shadow-lg transition-shadow tracking-vn-tight\"\r\n        >\r\n          Xem bói mới\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nReadingResult.propTypes = {\r\n  reading: PropTypes.object,\r\n  interpretation: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.object\r\n  ]),\r\n  isLoading: PropTypes.bool,\r\n  onSave: PropTypes.func,\r\n  onShareClick: PropTypes.func\r\n};\r\n\r\nexport default ReadingResult; ","import React, { useState, useEffect, memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TarotCardDisplay from './TarotCardDisplay';\r\n\r\n/**\r\n * Component hiển thị layout trải bài tarot với animation\r\n * @param {Object} props - Component props\r\n * @param {string} props.readingType - Loại trải bài (\"three-card\", \"celtic-cross\", \"love\", \"career\", etc.)\r\n * @param {Array} props.cards - Mảng các lá bài\r\n * @param {boolean} props.isRevealing - Đang trong quá trình lật bài\r\n * @param {number} props.revealCount - Số lá bài đã lật\r\n */\r\nconst TarotReadingLayout = memo(({ \r\n  readingType = 'three-card', \r\n  cards = [], \r\n  isRevealing = false,\r\n  revealCount = 0\r\n}) => {\r\n  // State quản lý số lá bài đã hiển thị\r\n  const [visibleCards, setVisibleCards] = useState(0);\r\n  const [currentReveal, setCurrentReveal] = useState(0);\r\n  const [layoutReady, setLayoutReady] = useState(false);\r\n  \r\n  // Hiệu ứng xuất hiện dần của các lá bài\r\n  useEffect(() => {\r\n    if (cards && cards.length > 0) {\r\n      const interval = setInterval(() => {\r\n        setVisibleCards(prev => {\r\n          if (prev < cards.length) {\r\n            return prev + 1;\r\n          }\r\n          clearInterval(interval);\r\n          setLayoutReady(true);\r\n          return prev;\r\n        });\r\n      }, 300);\r\n      \r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [cards]);\r\n  \r\n  // Theo dõi quá trình lật bài\r\n  useEffect(() => {\r\n    setCurrentReveal(revealCount);\r\n  }, [revealCount]);\r\n  \r\n  // Xác định vị trí của từng lá bài dựa vào loại trải bài\r\n  const getLayout = () => {\r\n    switch (readingType) {\r\n      case 'three-card':\r\n        return {\r\n          container: 'h-[300px] md:h-[350px]',\r\n          positions: [\r\n            'left-[15%] top-1/2 -translate-y-1/2',\r\n            'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',\r\n            'right-[15%] top-1/2 -translate-y-1/2'\r\n          ],\r\n          labels: ['Quá khứ', 'Hiện tại', 'Tương lai']\r\n        };\r\n        \r\n      case 'celtic-cross':\r\n        return {\r\n          container: 'h-[500px] md:h-[550px]',\r\n          positions: [\r\n            'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2', // Center card\r\n            'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rotate-90', // Crossing card\r\n            'left-1/2 bottom-[10%] -translate-x-1/2', // Below\r\n            'left-1/2 top-[10%] -translate-x-1/2', // Above\r\n            'left-[15%] top-1/2 -translate-y-1/2', // Left\r\n            'right-[15%] top-1/2 -translate-y-1/2', // Right\r\n            'right-[5%] bottom-[20%]', // Position 7\r\n            'right-[5%] bottom-[60%]', // Position 8\r\n            'right-[5%] top-[60%]', // Position 9\r\n            'right-[5%] top-[20%]', // Position 10\r\n          ],\r\n          labels: [\r\n            'Hiện tại', 'Thách thức', 'Nền tảng', 'Quá khứ', \r\n            'Ảnh hưởng sắp tới', 'Tương lai', 'Bản thân', \r\n            'Môi trường', 'Hy vọng/Sợ hãi', 'Kết quả'\r\n          ]\r\n        };\r\n        \r\n      case 'love':\r\n        return {\r\n          container: 'h-[350px] md:h-[400px]',\r\n          positions: [\r\n            'left-[10%] top-1/2 -translate-y-1/2',\r\n            'left-[30%] top-1/2 -translate-y-1/2',\r\n            'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',\r\n            'right-[30%] top-1/2 -translate-y-1/2',\r\n            'right-[10%] top-1/2 -translate-y-1/2'\r\n          ],\r\n          labels: [\r\n            'Bạn', 'Cảm xúc của bạn', 'Mối quan hệ', \r\n            'Cảm xúc của họ', 'Người ấy'\r\n          ]\r\n        };\r\n        \r\n      case 'career':\r\n        return {\r\n          container: 'h-[350px] md:h-[400px]',\r\n          positions: [\r\n            'left-[10%] top-1/2 -translate-y-1/2',\r\n            'left-[30%] top-1/2 -translate-y-1/2',\r\n            'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',\r\n            'right-[30%] top-1/2 -translate-y-1/2',\r\n            'right-[10%] top-1/2 -translate-y-1/2'\r\n          ],\r\n          labels: [\r\n            'Hiện tại', 'Thách thức', 'Lời khuyên', \r\n            'Tiềm năng', 'Kết quả'\r\n          ]\r\n        };\r\n        \r\n      default:\r\n        // Circular layout\r\n        const positions = [];\r\n        const labels = [];\r\n        \r\n        if (cards && cards.length > 0) {\r\n          for (let i = 0; i < cards.length; i++) {\r\n            const angle = (i / cards.length) * 2 * Math.PI;\r\n            const radius = cards.length <= 5 ? 35 : 40; // percentage\r\n            const x = 50 + radius * Math.cos(angle);\r\n            const y = 50 + radius * Math.sin(angle);\r\n            positions.push(`left-[${x}%] top-[${y}%] -translate-x-1/2 -translate-y-1/2`);\r\n            labels.push(`Lá ${i + 1}`);\r\n          }\r\n        }\r\n        \r\n        return {\r\n          container: 'h-[400px] md:h-[450px]',\r\n          positions: positions,\r\n          labels: labels\r\n        };\r\n    }\r\n  };\r\n  \r\n  const layout = getLayout();\r\n  \r\n  // Nếu không có cards, hiển thị trạng thái loading\r\n  if (!cards || cards.length === 0) {\r\n    return (\r\n      <div className=\"h-[300px] md:h-[350px] bg-gradient-to-br from-[#2a1045]/30 to-[#3a1c5a]/30 rounded-xl flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"w-12 h-12 mx-auto mb-4 rounded-full border-4 border-[#9370db] border-t-transparent animate-spin\"></div>\r\n          <p className=\"text-white tracking-vn-tight\">Đang chuẩn bị bài...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className={`relative ${layout.container} bg-gradient-to-br from-[#2a1045]/30 to-[#3a1c5a]/30 rounded-xl overflow-hidden mb-10`}>\r\n      {/* Background pattern */}\r\n      <div className=\"absolute inset-0 bg-[url('/src/assets/images/tarot-pattern.png')] bg-repeat opacity-5\"></div>\r\n      \r\n      {/* Center glow */}\r\n      <div className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-40 h-40 bg-[#9370db]/20 rounded-full filter blur-3xl\"></div>\r\n      \r\n      {/* Cards */}\r\n      {cards && cards.map((card, index) => {\r\n        // Đảm bảo card là đối tượng hợp lệ và có vị trí trong layout\r\n        if (!card || index >= (layout.positions ? layout.positions.length : 0) || index >= visibleCards) {\r\n          return null;\r\n        }\r\n        \r\n        return (\r\n          <div key={card.id || `card-${index}`} className=\"absolute z-10\">\r\n            <TarotCardDisplay \r\n              card={card}\r\n              isRevealed={isRevealing && index < currentReveal}\r\n              size=\"medium\"\r\n              position={layout.positions[index] || ''}\r\n            />\r\n            \r\n            {/* Position label */}\r\n            {layoutReady && layout.labels && layout.labels[index] && (\r\n              <div className={`absolute ${\r\n                readingType === 'celtic-cross' && index === 1 \r\n                  ? 'left-1/2 -translate-x-1/2 -bottom-10' \r\n                  : 'left-1/2 -translate-x-1/2 -top-8'\r\n              }`}>\r\n                <div className=\"px-2 py-1 bg-[#9370db]/20 backdrop-blur-sm rounded-full\">\r\n                  <span className=\"text-xs text-white opacity-80 tracking-vn-tight\">\r\n                    {layout.labels[index] || `Lá ${index + 1}`}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n      \r\n      {/* Loading or instruction overlay */}\r\n      {(!layoutReady || (isRevealing && cards && currentReveal < cards.length)) && (\r\n        <div className=\"absolute inset-0 flex items-center justify-center bg-[#0f051d]/50 backdrop-blur-sm z-20\">\r\n          <div className=\"text-center\">\r\n            {!layoutReady ? (\r\n              <>\r\n                <div className=\"w-12 h-12 mx-auto mb-4 rounded-full border-4 border-[#9370db] border-t-transparent animate-spin\"></div>\r\n                <p className=\"text-white tracking-vn-tight\">Đang trải bài...</p>\r\n              </>\r\n            ) : (\r\n              <p className=\"text-white tracking-vn-tight\">Lật từng lá bài để xem kết quả...</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Mystic elements */}\r\n      <div className=\"absolute left-5 top-5 w-10 h-10 text-2xl animate-float opacity-30\">✨</div>\r\n      <div className=\"absolute right-10 bottom-10 w-8 h-8 text-xl animate-float opacity-30 animation-delay-1000\">🌙</div>\r\n      <div className=\"absolute right-5 top-1/4 w-8 h-8 text-xl animate-float opacity-30 animation-delay-2000\">⭐</div>\r\n      <div className=\"absolute left-10 bottom-1/4 w-6 h-6 text-lg animate-float opacity-30 animation-delay-3000\">✨</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nTarotReadingLayout.propTypes = {\r\n  readingType: PropTypes.string,\r\n  cards: PropTypes.array,\r\n  isRevealing: PropTypes.bool,\r\n  revealCount: PropTypes.number\r\n};\r\n\r\nexport default TarotReadingLayout; ","import React, { useState, useEffect, useCallback, memo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchAllCards, performReading, getInterpretation, clearSelectedCards } from '../slices/tarotSlice';\r\nimport TarotReadingForm from './TarotReadingForm';\r\nimport ReadingResult from './ReadingResult';\r\nimport TarotReadingLayout from './TarotReadingLayout';\r\n\r\n/**\r\n * Component chính kết hợp form và kết quả đọc bài Tarot\r\n */\r\nconst TarotReading = memo(() => {\r\n  const dispatch = useDispatch();\r\n  const { cards, selectedCards, currentReading, interpretation, loading, error } = useSelector(state => state.tarot);\r\n  const [readingStarted, setReadingStarted] = useState(false);\r\n  const [readingStep, setReadingStep] = useState('form'); // 'form', 'cards', 'result'\r\n  const [revealCount, setRevealCount] = useState(0);\r\n  const [readingData, setReadingData] = useState(null);\r\n  \r\n  // Fetch tất cả cards khi component mount\r\n  useEffect(() => {\r\n    if (!cards || cards.length === 0) {\r\n      dispatch(fetchAllCards());\r\n    }\r\n  }, [dispatch, cards]);\r\n  \r\n  // Xử lý khi bắt đầu đọc bài\r\n  const handleStartReading = useCallback((data) => {\r\n    if (!data) return;\r\n    \r\n    setReadingStarted(true);\r\n    setReadingStep('cards');\r\n    setReadingData(data);\r\n    setRevealCount(0);\r\n    \r\n    // Reset selected cards\r\n    dispatch(clearSelectedCards());\r\n    \r\n    // Gọi API để lấy kết quả\r\n    dispatch(performReading(data))\r\n      .then(() => {\r\n        // Sau khi có kết quả, bắt đầu quá trình lật bài\r\n        setTimeout(() => {\r\n          if (data && data.numCards) {\r\n            startRevealProcess(data.numCards);\r\n          }\r\n        }, 1500);\r\n      });\r\n  }, [dispatch]);\r\n  \r\n  // Xử lý quá trình lật bài từng lá một\r\n  const startRevealProcess = useCallback((totalCards) => {\r\n    if (!totalCards || totalCards <= 0) return;\r\n    \r\n    let currentReveal = 0;\r\n    \r\n    const revealInterval = setInterval(() => {\r\n      currentReveal += 1;\r\n      setRevealCount(currentReveal);\r\n      \r\n      if (currentReveal >= totalCards) {\r\n        clearInterval(revealInterval);\r\n        \r\n        // Đợi một chút để người dùng xem tất cả các lá bài\r\n        setTimeout(() => {\r\n          // Chuyển sang hiển thị kết quả\r\n          setReadingStep('result');\r\n          \r\n          // Lấy giải thích AI nếu chưa có\r\n          if (!interpretation && currentReading && currentReading.cards) {\r\n            dispatch(getInterpretation({\r\n              cards: currentReading.cards,\r\n              question: currentReading.question || '',\r\n              readingType: currentReading.readingType || 'general'\r\n            }));\r\n          }\r\n        }, 2000);\r\n      }\r\n    }, 1200); // Lật mỗi lá bài sau 1.2 giây\r\n    \r\n    return () => clearInterval(revealInterval);\r\n  }, [dispatch, currentReading, interpretation]);\r\n  \r\n  // Xử lý khi lưu kết quả\r\n  const handleSaveReading = useCallback(() => {\r\n    // Hiển thị thông báo thành công\r\n    alert('Đã lưu kết quả thành công!');\r\n    // Trong thực tế sẽ gọi API để lưu\r\n  }, []);\r\n  \r\n  // Xử lý khi chia sẻ kết quả\r\n  const handleShareReading = useCallback(() => {\r\n    // Hiển thị modal chia sẻ\r\n    alert('Chức năng chia sẻ đang được phát triển!');\r\n    // Trong thực tế sẽ hiển thị modal với các options chia sẻ\r\n  }, []);\r\n  \r\n  // Xử lý khi bắt đầu lại\r\n  const handleRestart = useCallback(() => {\r\n    setReadingStarted(false);\r\n    setReadingStep('form');\r\n    setRevealCount(0);\r\n    setReadingData(null);\r\n    dispatch(clearSelectedCards());\r\n  }, [dispatch]);\r\n  \r\n  // Render dựa trên bước hiện tại\r\n  let content;\r\n  \r\n  if (readingStep === 'form') {\r\n    content = (\r\n      <TarotReadingForm \r\n        onStart={handleStartReading}\r\n        isLoading={loading}\r\n      />\r\n    );\r\n  } else if (readingStep === 'cards') {\r\n    content = (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"bg-white/5 backdrop-blur-sm border border-purple-900/20 rounded-xl p-6 md:p-8 text-center\">\r\n          <h2 className=\"text-2xl font-bold text-white mb-4 tracking-vn-tight\">Đang trải bài Tarot</h2>\r\n          \r\n          {currentReading && currentReading.question && (\r\n            <div className=\"my-4 p-4 bg-[#9370db]/10 rounded-lg\">\r\n              <p className=\"text-gray-300 tracking-vn-tight italic\">\r\n                \"{currentReading.question}\"\r\n              </p>\r\n            </div>\r\n          )}\r\n          \r\n          {currentReading && currentReading.cards && Array.isArray(currentReading.cards) && currentReading.cards.length > 0 && (\r\n            <TarotReadingLayout\r\n              readingType={readingData?.readingType || 'three-card'}\r\n              cards={currentReading.cards}\r\n              isRevealing={true}\r\n              revealCount={revealCount}\r\n            />\r\n          )}\r\n          \r\n          {(!currentReading || !currentReading.cards || !Array.isArray(currentReading.cards) || currentReading.cards.length === 0) && (\r\n            <div className=\"animate-pulse space-y-4\">\r\n              <p className=\"text-gray-300 tracking-vn-tight\">Xin vui lòng chờ trong giây lát</p>\r\n              <div className=\"w-20 h-20 rounded-full bg-[#9370db]/30 mx-auto flex items-center justify-center\">\r\n                <div className=\"w-12 h-12 rounded-full bg-[#9370db] animate-ping\"></div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"text-center\">\r\n          <button\r\n            onClick={handleRestart}\r\n            className=\"bg-white/10 backdrop-blur-sm text-white px-4 py-2 rounded-lg font-medium hover:bg-white/20 transition-colors tracking-vn-tight inline-flex items-center\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n            Hủy trải bài\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (readingStep === 'result') {\r\n    content = (\r\n      <ReadingResult \r\n        reading={currentReading || {}}\r\n        interpretation={interpretation || ''}\r\n        isLoading={loading}\r\n        onSave={handleSaveReading}\r\n        onShareClick={handleShareReading}\r\n      />\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      {error && (\r\n        <div className=\"bg-red-500/20 backdrop-blur-sm border border-red-500/30 rounded-lg p-4 mb-6\">\r\n          <p className=\"text-white tracking-vn-tight\">{error}</p>\r\n        </div>\r\n      )}\r\n      \r\n      {content}\r\n      \r\n      {readingStarted && readingStep === 'result' && (\r\n        <div className=\"mt-8 text-center\">\r\n          <button\r\n            onClick={handleRestart}\r\n            className=\"bg-white/10 backdrop-blur-sm text-white px-6 py-3 rounded-lg font-medium hover:bg-white/20 transition-colors tracking-vn-tight inline-flex items-center\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\r\n            </svg>\r\n            Trải bài mới\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default TarotReading; "],"names":["ReadingTypeCard","memo","_ref","type","selected","onClick","icon","description","_jsx","className","id","children","_jsxs","name","TarotReadingForm","_ref2","onStart","readingTypes","isLoading","dispatch","useDispatch","selectedType","setSelectedType","useState","question","setQuestion","showAIQuestion","setShowAIQuestion","error","setError","types","length","cards","motion","div","initial","opacity","y","animate","transition","duration","onSubmit","e","preventDefault","selectedReadingType","find","readingData","readingType","trim","numCards","performReading","console","map","handleQuickStart","disabled","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","height","exit","htmlFor","value","onChange","target","placeholder","rows","propTypes","PropTypes","isRequired","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","card","isRevealed","onCardClick","isSelectable","isSelected","size","position","isFlipped","setIsFlipped","isReversal","setIsReversal","isHovering","setIsHovering","useEffect","undefined","isReversed","Math","random","timer","setTimeout","clearTimeout","sizeClasses","small","medium","large","style","transform","variants","hidden","rotateY","visible","ease","handleCardClick","transformStyle","delay","src","alt","onError","imageUrl","reading","interpretation","onSave","onShareClick","allCardsRevealed","setAllCardsRevealed","revealsCount","setRevealsCount","expandedSection","setExpandedSection","Array","isArray","revealInterval","setInterval","prev","next","clearInterval","Link","to","cardPositions","getCardPositions","cardsCount","positions","i","angle","PI","x","cos","sin","push","readingDate","Date","createdAt","now","toLocaleDateString","year","month","day","hour","minute","sections","JSON","parse","title","content","index","meaning","substring","TarotCardDisplay","cx","cy","r","section","toggleSection","conclusion","isRevealing","revealCount","visibleCards","setVisibleCards","currentReveal","setCurrentReveal","layoutReady","setLayoutReady","interval","layout","getLayout","container","labels","radius","_Fragment","selectedCards","currentReading","loading","useSelector","state","tarot","readingStarted","setReadingStarted","readingStep","setReadingStep","setRevealCount","setReadingData","fetchAllCards","handleStartReading","useCallback","data","clearSelectedCards","then","startRevealProcess","totalCards","getInterpretation","handleSaveReading","alert","handleShareReading","handleRestart","TarotReadingLayout","ReadingResult"],"sourceRoot":""}