import React, { useState, useEffect, memo } from 'react';
import PropTypes from 'prop-types';
import { motion } from 'framer-motion';

/**
 * Component cho ph√©p ng∆∞·ªùi d√πng l·ª±a ch·ªçn gi·ªØa b√≥i th∆∞·ªùng v√† b√≥i AI
 * 
 * @param {Object} props - Component props
 * @param {boolean} props.useAI - Tr·∫°ng th√°i hi·ªán t·∫°i c√≥ ƒëang s·ª≠ d·ª•ng AI kh√¥ng
 * @param {Function} props.onToggle - Callback khi ng∆∞·ªùi d√πng chuy·ªÉn ƒë·ªïi lo·∫°i b√≥i
 */
const ReadingTypeSelector = memo(({ useAI, onToggle }) => {
  // Log debugging
  console.log('ReadingTypeSelector rendered v·ªõi useAI:', useAI);

  const handleToggle = (value) => {
    console.log('ReadingTypeSelector - Toggling to:', value);
    onToggle(value);
  };

  return (
    <div className="mb-6">
      <h3 className="text-lg font-medium text-white mb-4 tracking-vn-tight flex items-center">
        <span className="text-2xl mr-2">üß†</span> Ch·ªçn C√°ch B√≥i B√†i
      </h3>
      
      <div className="grid grid-cols-2 gap-4">
        {/* B√≥i Th∆∞·ªùng */}
        <motion.div
          className={`p-4 rounded-lg cursor-pointer transition-all duration-300 
            ${!useAI 
              ? 'bg-gradient-to-r from-[#9370db] to-[#8a2be2] shadow-lg transform scale-[1.02]' 
              : 'bg-white/5 backdrop-blur-sm border border-purple-900/20 hover:bg-white/10'}`}
          onClick={() => handleToggle(false)}
          whileHover={{ y: -3, scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          <div className="flex items-center">
            <div className="w-12 h-12 rounded-full bg-[#2a1045] flex items-center justify-center mr-4">
              <span className="text-2xl">üîÆ</span>
            </div>
            <div>
              <h3 className="text-lg font-medium text-white mb-1 tracking-vn-tight">B√≥i Th∆∞·ªùng</h3>
              <p className="text-sm text-gray-300 tracking-vn-tight">S·ª≠ d·ª•ng di·ªÖn gi·∫£i c√≥ s·∫µn d·ª±a tr√™n b·ªô template</p>
            </div>
          </div>
        </motion.div>
        
        {/* B√≥i AI */}
        <motion.div
          className={`p-4 rounded-lg cursor-pointer transition-all duration-300 
            ${useAI 
              ? 'bg-gradient-to-r from-[#9370db] to-[#8a2be2] shadow-lg transform scale-[1.02]' 
              : 'bg-white/5 backdrop-blur-sm border border-purple-900/20 hover:bg-white/10'}`}
          onClick={() => handleToggle(true)}
          whileHover={{ y: -3, scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          <div className="flex items-center">
            <div className="w-12 h-12 rounded-full bg-[#2a1045] flex items-center justify-center mr-4">
              <span className="text-2xl">ü§ñ</span>
            </div>
            <div>
              <h3 className="text-lg font-medium text-white mb-1 tracking-vn-tight">B√≥i AI</h3>
              <p className="text-sm text-gray-300 tracking-vn-tight">S·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o ph√¢n t√≠ch chuy√™n s√¢u</p>
            </div>
          </div>
        </motion.div>
      </div>
      
      <div className="mt-3 p-3 text-sm text-gray-300 bg-[#2a1045]/40 rounded-lg">
        <div className="flex items-start">
          <span className="text-[#9370db] mr-2">üí°</span>
          <p className="tracking-vn-tight">
            {useAI 
              ? "B√≥i AI s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ ph√¢n t√≠ch l√° b√†i s√¢u s·∫Øc v√† c√° nh√¢n h√≥a h∆°n. K·∫øt qu·∫£ c√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian."
              : "B√≥i Th∆∞·ªùng s·ª≠ d·ª•ng th√¥ng tin v√† di·ªÖn gi·∫£i c·ªï ƒëi·ªÉn c√≥ s·∫µn, ph√π h·ª£p v·ªõi nh·ªØng ai mu·ªën ƒë·ªçc nhanh."}
          </p>
        </div>
      </div>
    </div>
  );
});

ReadingTypeSelector.propTypes = {
  useAI: PropTypes.bool.isRequired,
  onToggle: PropTypes.func.isRequired
};

export default ReadingTypeSelector; 